{"version":3,"file":"static/js/247.a126becc.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","hooks/useFetch.js","services/constants.js"],"sourcesContent":["import { useEffect, lazy } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useFetch from 'hooks/useFetch';\nimport { STATUS, TMDB_API_V3_KEY } from 'services/constants';\n\nimport Loader from 'components/Loader/Loader';\nconst CastGallery = lazy(() => import('./CastGallery'));\n\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const { status, setStatus, responseData, errorMessage, setErrorMessage } = useFetch(`/movie/${movieId}/credits?api_key=${TMDB_API_V3_KEY}`);\n\n  useEffect(() => {\n    if (status !== STATUS.RESOLVED) return;\n    if (!responseData) {\n      setErrorMessage('No information about cast was received. The reason is unknown.');\n      setStatus(STATUS.REJECTED);\n    }\n    if (responseData.cast.length) return\n    setErrorMessage('No information about cast yet.');\n    setStatus(STATUS.REJECTED);\n  }, [status, responseData, setErrorMessage, setStatus]);\n\n  return (\n    <>\n      {status === STATUS.PENDING && <Loader />}\n      {status === STATUS.REJECTED && errorMessage}\n      {status === STATUS.RESOLVED && <CastGallery cast={responseData.cast} />}\n    </>\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { useState, useEffect } from 'react';\nimport { STATUS, TMDB_API_V3_BASE_URL } from 'services/constants';\n\n\nconst useFetch = (apiQuery, apiBaseURL = TMDB_API_V3_BASE_URL) => {\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [responseData, setResponseData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    async function fetchData(apiQuery, apiBaseURL) {\n      if (!apiQuery) return;\n\n      setStatus(STATUS.PENDING);\n      let response = {};\n      try {\n        response = await fetch(`${apiBaseURL}${apiQuery}`);\n        if (!response.ok) {\n          throw new Error(\n            'No data found, please, change your request and try again.'\n          );\n        }\n        response = response.json();\n      } catch (error) {\n        setErrorMessage(error.message);\n        setStatus(STATUS.REJECTED);\n      }\n\n      const data = await response;\n      setResponseData(data);\n      setStatus(STATUS.RESOLVED);\n    }\n\n    fetchData(apiQuery, apiBaseURL);\n  }, [apiQuery, apiBaseURL]);\n\n  return {status, setStatus, responseData, errorMessage, setErrorMessage};\n};\n\n\nexport default useFetch;\n","const TMDB_API_V3_BASE_URL = 'https://api.themoviedb.org/3';\nconst TMDB_API_V3_KEY = '66b82de9da5bf29292195e4434639692';\nconst TMDB_IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst TMDB_POPULAR_MOVIES_QUERY_URL_SUFFIX = `/trending/all/day?api_key=${TMDB_API_V3_KEY}`;\n\nconst STATUS = {\n  IDLE: 0,\n  PENDING: 1,\n  REJECTED: 2,\n  RESOLVED: 3\n};\nObject.freeze(STATUS);\n\nconst DEFAULT_POSTER_URL = 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg';\n\n\nexport {\n  TMDB_API_V3_BASE_URL,\n  TMDB_API_V3_KEY,\n  TMDB_IMAGES_BASE_URL,\n  TMDB_POPULAR_MOVIES_QUERY_URL_SUFFIX,\n  STATUS,\n  DEFAULT_POSTER_URL,\n};\n"],"names":["CastGallery","lazy","Cast","movieId","useParams","useFetch","TMDB_API_V3_KEY","status","setStatus","responseData","errorMessage","setErrorMessage","useEffect","STATUS","cast","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","apiQuery","apiBaseURL","TMDB_API_V3_BASE_URL","useState","setResponseData","response","fetch","ok","Error","json","message","data","fetchData","TMDB_IMAGES_BASE_URL","TMDB_POPULAR_MOVIES_QUERY_URL_SUFFIX","IDLE","PENDING","REJECTED","RESOLVED","Object","freeze","DEFAULT_POSTER_URL"],"sourceRoot":""}